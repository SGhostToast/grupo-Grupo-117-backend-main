openapi: '3.0.2'
info:
  title: Uno Online
  version: '1.0'
servers:
  - url: https://localhost:3000
basePath: /
paths:
  /users/:
    get:
      description: Display the list of the users in the database
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
  
  /users/signup:
    post:
      description: Creates a user
      parameters:
      - in: query
        name: username
        required: true
        schema: 
          $ref: '#/components/schemas/User/properties/username'
      - in: query
        name: password
        required: true
        schema: 
          $ref: '#/components/schemas/User/properties/password'
      - in: query
        name: mail
        required: true
        schema: 
          type: string
          $ref: '#/components/schemas/User/properties/mail'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The user could not be created


  /users/login:
    post:
      description: Logs in as user
      parameters:
      - in: query
        name: username
        schema: 
          $ref: '#/components/schemas/User/properties/username'
      - in: query
        name: mail
        schema: 
          $ref: '#/components/schemas/User/properties/mail'
      - in: query
        name: password
        required: true
        schema: 
          $ref: '#/components/schemas/User/properties/password'
        schema: 
          anyOf:
            - username
            - mail
      responses:
        '200':
          description: Your are logged as user !
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Either the username/mail does not exist or the password does not correspond.



  /users/showfriends:
    post:
      description: Swhows the friends of a user
      parameters:
      - in: query
        name: username
        schema: 
          $ref: '#/components/schemas/User/properties/username'
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  msg: 
                    type: string
                    example: List of friendships
                  users:
                    type: array 
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Did not find a user with this username


  /users/pendingfriends:
    post:
      description: Swhows the pending invitations of a user
      parameters:
      - in: query
        name: username
        schema: 
          $ref: '#/components/schemas/User/properties/username'
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  msg: 
                    type: string
                    example: List of friendships to accept or refuse
                  users:
                    type: array 
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Did not find a user with this username


# router.post("users.befriend", "/befriend", async(ctx) => {
#   try {
#     // This stays like this for now, but when we have multiple sessions and a remote server,
#     // the user id would be retrieved automatically.
#     if(ctx.request.body.myusername && ctx.request.body.friendusername) {
#       const user = await ctx.orm.User.findOne({where:{username:ctx.request.body.myusername}});
#       if (!user) {
#         throw Error(`No se encontró tu usuario con username ${ctx.request.body.myusername}.`);
#       }
#       const friend = await ctx.orm.User.findOne({where:{username:ctx.request.body.friendusername}});
#       if (!friend) {
#         throw Error(`No se encontró el usuario de tu amigo con username ${ctx.request.body.friendusername}.`);
#       }
#       if (user.id == friend.id) {
#         throw Error(`Ya eres amigx de ti mismx c;`);
#       }
#       let msg;
#       let friendship = await ctx.orm.Friend.findOne({
#         where: {
#           [Op.or]: [
#             { frienderid: user.id, befriendedid: friend.id },
#             { frienderid: friend.id, befriendedid: user.id }
#           ]
#         }
#       });
#       if (friendship) {
#         if (friendship.status == 'FRENS') {
#           throw Error(`Tu y ${ctx.request.body.friendusername} ya tienen una linda amistad desde antes c:`);
#         }
#         else if (friendship.frienderid == user.id) {
#           throw Error(`Ya le has enviado una solicitud de amistad a ${ctx.request.body.friendusername} anteriormente.`);
#         }
#         friendship.status = 'FRENS';
#         friendship.save();
#         msg = `¡La solicitud de amistad de ${ctx.request.body.friendusername} ha sido aceptada!`;
#       }
#       else {
#         const info = {
#           frienderid: user.id,
#           befriendedid: friend.id,
#         }
#         friendship = await ctx.orm.Friend.create(info);
#         msg = `¡Le has enviado una solicitud de amistad a ${ctx.request.body.friendusername}!`
#       }
#       ctx.body = {
#         msg: msg,
#         friendship: friendship
#       };
#       ctx.status = 201;
#     }
#     else {
#       throw Error('Se necesita entregar tu nombre de usuario como "myusername" y el de tu amigx como "friendusername".')
#     }
#   } catch(error) {
#     ctx.body = { errorMessage: error.message, errorCode: error.code };
#     ctx.status = 400;
#   }
# })

# router.post("users.unfriend", "/unfriend", async(ctx) => {
#   try {
#     // This stays like this for now, but when we have multiple sessions and a remote server,
#     // the user id would be retrieved automatically.
#     if(ctx.request.body.myusername && ctx.request.body.otherusername) {
#       const user = await ctx.orm.User.findOne({where:{username:ctx.request.body.myusername}});
#       if (!user) {
#         throw Error(`No se encontró tu usuario con username ${ctx.request.body.myusername}.`)
#       }
#       const other = await ctx.orm.User.findOne({where:{username:ctx.request.body.otherusername}});
#       if (!other) {
#         throw Error(`No se encontró el usuario del usuario con username ${ctx.request.body.otherusername}.`)
#       }
#       const friendship = await ctx.orm.Friend.findOne({
#         where: {
#           [Op.or]: [
#             {frienderid: other.id, befriendedid: user.id},
#             {frienderid: user.id, befriendedid: other.id}
#           ]
#         }
#       });
#       let msg;
#       if (!friendship) {
#         throw Error(`No hay ni solicitud ni amistad por parte del usuario ${ctx.request.body.otherusername}.`)
#       }
#       else if (friendship.status == 'FRENS') {
#         msg = `Amistad con ${ctx.request.body.otherusername} terminada.`;
#       }
#       else if (friendship.status == 'PENDING' && friendship.frienderid == user.id) {
#         msg = `Solicitud de amistad a ${ctx.request.body.otherusername} cancelada.`;
#       }
#       else {
#         msg = `Solicitud de amistad de ${ctx.request.body.otherusername} rechazada.`;
#       }
#       await friendship.destroy();
#       ctx.body = {
#         msg: msg,
#       };
#       ctx.status = 201;
#     }
#     else {
#       throw Error('Se necesita entregar tu nombre de usuario como "myusername" y el de la otra persona como "otherusername".')
#     }
#   } catch(error) {
#     ctx.body = { errorMessage: error.message, errorCode: error.code };
#     ctx.status = 400;
#   }
# })

# router.get("users.show", "/:id", async(ctx) => {
#   try {
#     // const user = await ctx.orm.User.findByPk(ctx.params.id);
#     const user = await ctx.orm.User.findOne({where:{id:ctx.params.id}});
#     ctx.body = user;
#     ctx.status = 200;
#   } catch(error) {
#     ctx.body = error;
#     ctx.status = 400;
#   }
# })

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: Lilou
          pattern: /^[a-zA-Z0-9._\-!¡?¿$&@]+$/
        password:
          type: string
        mail:
          type: string
          example: 'user@example.com'
        played_matches: 
          type: integer
        won_matches: 
          type: integer
        max_score: 
          type: integer
        total_score:
          type: integer
        status: 
          type: string
          enum: ['OFFLINE', 'ONLINE', 'PLAYING']  